
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "python/generated_tutorials/plot_tutorial_01_basics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_python_generated_tutorials_plot_tutorial_01_basics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_python_generated_tutorials_plot_tutorial_01_basics.py:


Tutorial 01: Linear Models
=========================================

In this tutorial you will set up your first linear model with SurfStat. Please
note that brainstat does not include sample data yet. Once we introduce
example data loader functions into BrainStat this tutorial will be modified 
accordingly. Until such time, we will rely on randomly generated data and sample
data from BrainSpace.

Setting up a linear model
---------------------------------
Lets start setting up a basic model. Recall that fixed linear models take the
form of :math:`Y = \beta_0 + \beta_1x_1 + ... + \beta_nx_n + \varepsilon` where
:math:`\beta_0` denotes the intercept, :math:`\beta_i` denotes the slope for
variable :math:`x_i`, and :math:`\varepsilon` is the error term. In BrainStat we
can easily set up such a model as follows.

First lets load some example data to play around with. We'll load age, IQ, and left
hemispheric cortical thickness for a few subjects. 

.. GENERATED FROM PYTHON SOURCE LINES 26-54

.. code-block:: default


    import brainstat
    import os
    from brainstat.tutorial.utils import fetch_tutorial_data 
    from brainstat.context.utils import read_surface_gz
    import numpy as np
    import nibabel as nib
    from nilearn.datasets import fetch_surf_fsaverage

    brainstat_dir = os.path.dirname(brainstat.__file__)
    data_dir = os.path.join(brainstat_dir, 'tutorial')

    n = 10
    tutorial_data = fetch_tutorial_data(n_subjects=n, data_dir=data_dir)
    age = tutorial_data['demographics']['AGE'].to_numpy()
    iq = tutorial_data['demographics']['IQ'].to_numpy()

    # Reshape the thickness files such that left and right hemispheres are in the same row. 
    files = np.reshape(np.array(tutorial_data['image_files']),(-1,2))

    # We'll use only the left hemisphere in this tutorial.
    thickness = np.zeros((n,10242))
    for i in range(n):
        thickness[i,:] = np.squeeze(nib.load(files[i,0]).get_fdata())

    pial_left = read_surface_gz(fetch_surf_fsaverage()['pial_left'])









.. GENERATED FROM PYTHON SOURCE LINES 55-59

Next, we can create a BrainStat linear model by declaring these variables as
terms. The term class requires two things: 1) an array or scalar, and 2) a
variable name for each column. Lastly, we can create the model by simply
adding the terms together.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. code-block:: default



    from brainstat.stats.terms import Term
    term_intercept = Term(1, names='intercept')
    term_age = Term(age, 'age')
    term_iq = Term(iq, 'iq')
    model = term_intercept + term_age + term_iq









.. GENERATED FROM PYTHON SOURCE LINES 72-73

We can also add interaction effects to the model by multiplying terms.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default



    model_interaction = term_intercept + term_age + term_iq + term_age * term_iq









.. GENERATED FROM PYTHON SOURCE LINES 82-87

Now, lets imagine we have some cortical marker (e.g. cortical thickness) for
each subject and we want to evaluate whether this marker changes with age
whilst correcting for effects of sex and age-sex interactions. Note that
BrainStat's univariate tests are one-tailed, so the sign of the contrast
matters!

.. GENERATED FROM PYTHON SOURCE LINES 90-100

.. code-block:: default



    from brainstat.stats.models import linear_model, t_test

    Y = np.random.rand(n, 32492) # Surface has 32492 vertices.
    slm = linear_model(Y, model_interaction, pial_left)
    slm = t_test(slm, -age)
    print(slm['t']) # These are the t-values of the model.






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.78490531  0.4564982  -0.55116733 ...  2.87568819  1.4741226
      -1.56395636]]




.. GENERATED FROM PYTHON SOURCE LINES 101-105

Never forget: with great models come great multiple comparisons corrections.
BrainStat provides two methods for these corrections: FDR and random field theory.
In this example we'll show you how to use random field theory to find significant 
results at alpha=0.05.

.. GENERATED FROM PYTHON SOURCE LINES 108-115

.. code-block:: default


    from brainstat.stats.multiple_comparisons import random_field_theory

    alpha = 0.05
    P, _, _, _ = random_field_theory(slm)
    print(P['P'] < alpha)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [False False False ... False False False]




.. GENERATED FROM PYTHON SOURCE LINES 116-119

As said before, univariate tests in BrainStat use a one-tailed test. If you
want to get a two-tailed text, simply run contrast as well as its negative and
adjust the alpha accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 122-133

.. code-block:: default


    slm_basic = linear_model(Y, model_interaction, pial_left)

    slm1 = t_test(slm_basic, -age)
    slm2 = t_test(slm_basic, age)

    P1, _, _, _ = random_field_theory(slm1)
    P2, _, _, _ = random_field_theory(slm2)
    print(np.logical_or(P1['P'] < alpha/2, P2['P'] < alpha/2))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [False False False ... False False False]




.. GENERATED FROM PYTHON SOURCE LINES 134-136

Planned changes to this tutorial:
- Visualize results on the surface instead of printing.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.694 seconds)


.. _sphx_glr_download_python_generated_tutorials_plot_tutorial_01_basics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tutorial_01_basics.py <plot_tutorial_01_basics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tutorial_01_basics.ipynb <plot_tutorial_01_basics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
